// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/sunr3d/comment-tree/models"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, comment
func (_m *Database) Create(ctx context.Context, comment *models.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Database_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *models.Comment
func (_e *Database_Expecter) Create(ctx interface{}, comment interface{}) *Database_Create_Call {
	return &Database_Create_Call{Call: _e.mock.On("Create", ctx, comment)}
}

func (_c *Database_Create_Call) Run(run func(ctx context.Context, comment *models.Comment)) *Database_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Comment))
	})
	return _c
}

func (_c *Database_Create_Call) Return(_a0 error) *Database_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Create_Call) RunAndReturn(run func(context.Context, *models.Comment) error) *Database_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Database) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Database_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Database_Expecter) Delete(ctx interface{}, id interface{}) *Database_Delete_Call {
	return &Database_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Database_Delete_Call) Run(run func(ctx context.Context, id int64)) *Database_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Database_Delete_Call) Return(_a0 error) *Database_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *Database_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Database) GetByID(ctx context.Context, id int64) (*models.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Database_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Database_Expecter) GetByID(ctx interface{}, id interface{}) *Database_GetByID_Call {
	return &Database_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Database_GetByID_Call) Run(run func(ctx context.Context, id int64)) *Database_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Database_GetByID_Call) Return(_a0 *models.Comment, _a1 error) *Database_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*models.Comment, error)) *Database_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByParentID provides a mock function with given fields: ctx, parentID
func (_m *Database) GetByParentID(ctx context.Context, parentID int64) ([]models.Comment, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetByParentID")
	}

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.Comment, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.Comment); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetByParentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByParentID'
type Database_GetByParentID_Call struct {
	*mock.Call
}

// GetByParentID is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
func (_e *Database_Expecter) GetByParentID(ctx interface{}, parentID interface{}) *Database_GetByParentID_Call {
	return &Database_GetByParentID_Call{Call: _e.mock.On("GetByParentID", ctx, parentID)}
}

func (_c *Database_GetByParentID_Call) Run(run func(ctx context.Context, parentID int64)) *Database_GetByParentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Database_GetByParentID_Call) Return(_a0 []models.Comment, _a1 error) *Database_GetByParentID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetByParentID_Call) RunAndReturn(run func(context.Context, int64) ([]models.Comment, error)) *Database_GetByParentID_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
