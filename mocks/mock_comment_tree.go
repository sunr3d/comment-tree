// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/sunr3d/comment-tree/models"
)

// CommentTree is an autogenerated mock type for the CommentTree type
type CommentTree struct {
	mock.Mock
}

type CommentTree_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentTree) EXPECT() *CommentTree_Expecter {
	return &CommentTree_Expecter{mock: &_m.Mock}
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *CommentTree) DeleteComment(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentTree_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type CommentTree_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *CommentTree_Expecter) DeleteComment(ctx interface{}, id interface{}) *CommentTree_DeleteComment_Call {
	return &CommentTree_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, id)}
}

func (_c *CommentTree_DeleteComment_Call) Run(run func(ctx context.Context, id int64)) *CommentTree_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *CommentTree_DeleteComment_Call) Return(_a0 error) *CommentTree_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentTree_DeleteComment_Call) RunAndReturn(run func(context.Context, int64) error) *CommentTree_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetComments provides a mock function with given fields: ctx, parentID
func (_m *CommentTree) GetComments(ctx context.Context, parentID int64) ([]models.Comment, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]models.Comment, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.Comment); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentTree_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type CommentTree_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID int64
func (_e *CommentTree_Expecter) GetComments(ctx interface{}, parentID interface{}) *CommentTree_GetComments_Call {
	return &CommentTree_GetComments_Call{Call: _e.mock.On("GetComments", ctx, parentID)}
}

func (_c *CommentTree_GetComments_Call) Run(run func(ctx context.Context, parentID int64)) *CommentTree_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *CommentTree_GetComments_Call) Return(_a0 []models.Comment, _a1 error) *CommentTree_GetComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentTree_GetComments_Call) RunAndReturn(run func(context.Context, int64) ([]models.Comment, error)) *CommentTree_GetComments_Call {
	_c.Call.Return(run)
	return _c
}

// WriteComment provides a mock function with given fields: ctx, comment
func (_m *CommentTree) WriteComment(ctx context.Context, comment *models.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for WriteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentTree_WriteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteComment'
type CommentTree_WriteComment_Call struct {
	*mock.Call
}

// WriteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *models.Comment
func (_e *CommentTree_Expecter) WriteComment(ctx interface{}, comment interface{}) *CommentTree_WriteComment_Call {
	return &CommentTree_WriteComment_Call{Call: _e.mock.On("WriteComment", ctx, comment)}
}

func (_c *CommentTree_WriteComment_Call) Run(run func(ctx context.Context, comment *models.Comment)) *CommentTree_WriteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Comment))
	})
	return _c
}

func (_c *CommentTree_WriteComment_Call) Return(_a0 error) *CommentTree_WriteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentTree_WriteComment_Call) RunAndReturn(run func(context.Context, *models.Comment) error) *CommentTree_WriteComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommentTree creates a new instance of CommentTree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentTree(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentTree {
	mock := &CommentTree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
